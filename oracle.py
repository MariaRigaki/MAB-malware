import os
import sys
import json
from utils import *
import requests

#INTERPRETER_INPUT_PATH = ''
#MINIMIZED_PATH = ''

token = Utils.get_cuckoo_token()
headers = {'Authorization': 'Bearer %s' %token}
ori_json_path = '/home/wei/code/adversarial_malware/final_output/cuckoo_json_ori/'
dict_path_to_task_id = {}

def main():
    #del_all_task()
    #exit()

    #sample_path = '/home/wei/code/adversarial_malware/data/malware_3/16aa13bae09374ed0d83c39f07132d7e6075ba1f9b3e29574cb9d3ea09ff0668'
    #task_id = submit_task(sample_path)
    #print(task_id)

    status = get_task_status(1)
    print(status)
    if status  == 'reported':
        print(status)
    elif status == 'pending' or status == 'running':
        print(status)
    exit()
    #print(task_id)
    #print(dict_path_to_task_id)
    list_task = get_task_list()
    #for x in list_task:
    #    del_task(x)
    report_json = get_report_by_task_id(1)
    ori_json_path = get_ori_json_path(sample_path)
    with open(ori_json_path) as fp:
        ori_json = json.loads(fp.read())
    print_name_score(report_json)
    print_name_score(ori_json)
    report_des = get_des(report_json)
    ori_des = get_des(report_json)
    if compare_sig_list(ori_des, report_des):
        print('behavior is the same')
    else:
        print('behavior is changed')

def get_des(report_json):
    list_sig = report_json['signatures']
    list_des = []
    for sig in list_sig:
        severity = sig['severity']
        description = sig['description']
        list_des.append(description)
    return list_des

def get_ori_json_path(sample_path):
    list_file = os.listdir(ori_json_path)
    filename = os.path.basename(sample_path)
    for x in list_file:
        if filename in x:
            return ori_json_path + x

def log(content):
    #time_string = get_time_str()
    print('[' + time_string + ']', content)
    #with open(LOG_PATH, 'a') as fp:
    #    fp.write('[%s] %s\n' %(time_string, content))
    #sys.stdout.flush()

def get_report_by_path(sample_path):
    #print('#get_report_by_path')
    task_id = dict_path_to_task_id[sample_path]
    get_report_by_task_id(task_id)

def print_name_score(report_json):
    filename = report_json['target']['file']['name']
    score = report_json['info']['score']
    print(filename, score)

def get_report_by_task_id(task_id):
    print('#get_report_by_task_id')
    report_json = requests.get('http://localhost:8090/tasks/report/%d' %task_id, headers=headers).json()
    return report_json

def del_all_task():
    #print('#del_all_task')
    list_task_id = get_task_list()
    for task_id in list_task_id:
        del_task(task_id)

def del_task(task_id):
    print('#del_task')
    r = requests.get('http://localhost:8090/tasks/delete/%s' %task_id, headers=headers)
    print(r.text)

def submit_task(sample_path):
    print('#submit_task')
    with open(sample_path, 'rb') as sample:
        files = {'file': (os.path.basename(sample_path), sample)}
        r = requests.post('http://localhost:8090/tasks/create/file', headers=headers, files=files)
        task_id = r.json()['task_id']
    dict_path_to_task_id[sample_path] = task_id
    return task_id

def get_tasks():
    print('#get_tasks')
    r = requests.get('http://localhost:8090/tasks/list', headers=headers).json()
    tasks = r['tasks']
    return tasks

def get_task_list():
    tasks = get_tasks()
    for task in tasks:
        task_id = task['id']
        list_task_id.append(task_id)
        status = task['status']
        print(task_id, status)
    return list_task_id

def get_task_status(task_id):
    tasks = get_tasks()
    for task in tasks:
        cur_task_id = task['id']
        if cur_task_id == task_id:
            status = task['status']
            return status

def create_output_folder():
    os.system('rm -fr %s' %INTERPRETER_INPUT_PATH)
    os.system('mkdir -p %s' %INTERPRETER_INPUT_PATH)

def compare_sig_list(list_sig, list_sig_ori):
    encrypt = False
    for sig in list_sig:
        if 'encrypt' in sig:# or 'ansomware' in sig:
            encrypt = True
    count = 0
    for sig_ori in list_sig_ori:
        for sig in list_sig:
            if sig == sig_ori:
                count += 1
                break
    same_rate = float(count) / len(list_sig_ori)
    #print('len(ori), len(sig), same, rate, encrypt: %d, %d, %d, %f, %s' %(len(list_sig_ori), len(list_sig), count, same_rate, encrypt))
    if encrypt == True or len(list_sig_ori) - count <= 1 or same_rate >= 0.8:
        return True
    else:
        return False

if __name__ == '__main__':
    main()
