import torch
from torch import nn
import torch.nn.functional as F

import lightgbm as lgb
import numpy as np
import subprocess
import json
from ember import predict_sample, PEFeatureExtractor
from MalConv import MalConv
from sorel_nets import PENetwork
import sys
import tensorflow as tf
import os
import joblib

class MalConvModel(object):
    def __init__(self, model_path, thresh=0.5, name='malconv'): 
        self.model = MalConv(channels=256, window_size=512, embd_size=8).train()
        weights = torch.load(model_path,map_location='cpu')
        self.model.load_state_dict( weights['model_state_dict'])
        self.thresh = thresh
        self.__name__ = name

    def get_score(self, file_path):
        try:
            with open(file_path, 'rb') as fp:
                bytez = fp.read(2000000)        # read the first 2000000 bytes
                _inp = torch.from_numpy( np.frombuffer(bytez,dtype=np.uint8)[np.newaxis,:] )
                with torch.no_grad():
                    outputs = F.softmax( self.model(_inp), dim=-1)
                return outputs.detach().numpy()[0,1]
        except Exception as e:
            print(e)
        return 0.0 
    
    def is_evasive(self, file_path):
        score = self.get_score(file_path)
        #print(os.path.basename(file_path), score)
        return score < self.thresh


class LGBModel(object):       # Any LGB model 
    def __init__(self, model_path, thresh=0.8336, name='ember'):
        # load lightgbm model
        self.model = lgb.Booster(model_file=model_path)
        self.thresh = thresh
        self.__name__ = 'ember'

    def get_score(self,file_path):
        with open(file_path, 'rb') as fp:
            bytez = fp.read()
            score = predict_sample(self.model, bytez)
            return score
    
    def is_evasive(self, file_path):
        score = self.get_score(file_path)
        return score < self.thresh


class ClamAV(object):
    def is_evasive(self, file_path):
        res = subprocess.run(['clamdscan', '--fdpass', file_path], stdout=subprocess.PIPE)
        #print(res.stdout)
        if 'FOUND' in str(res.stdout):
            return False
        elif 'OK' in str(res.stdout):
            return True
        else:
            print('clamav error')
            exit()

class KerasModel(object):       # model in MLSEC 2019
    def __init__(self, model_path, scaler_path, thresh=0.5, name='keras', dual_input=False):
        # load lightgbm model
        self.model = tf.keras.models.load_model(model_path)
        self.thresh = thresh
        self.__name__ = name
        self.dual = dual_input
        
        if scaler_path is not None:
            if not os.path.isfile(model_path):
                raise FileNotFoundError(f'{model_path} not exists')
            self._scaler = joblib.load(scaler_path)
        else:
            self._scaler = None


    def preprocess(self, bytez):
        extractor = PEFeatureExtractor(2, print_feature_warning=False)
        features = np.array(extractor.feature_vector(bytez), dtype=np.float32)
        features = self._scaler.transform(features.reshape(1, -1))
        features = np.clip(features, -5, 5)

        return features

    def get_score(self,file_path):
        with open(file_path, 'rb') as fp:
            bytez = fp.read()
        
        features = self.preprocess(bytez)
        
        if self.dual:
            score = self.model.predict((features, np.ones((1, 1)))).ravel()
        else:
            score = self.model.predict(features).ravel()

        return score
    
    def is_evasive(self, file_path):
        score = self.get_score(file_path)
        return score < self.thresh


class SorelModel(object):
    def __init__(self, model_path, thresh=0.5, name='sorelFCNN',
            use_malware=True, use_counts=True, use_tags=True, n_tags=11,
			feature_dimension=2381, layer_sizes=None):
        self._sorel = PENetwork(use_malware, use_counts, use_tags, n_tags, feature_dimension, layer_sizes)
        if not os.path.isfile(model_path):
            raise FileNotFoundError(f'{model_path} not exists')
        self.load_model(model_path)
        self.thresh = thresh
        self.use_cuda = False # torch.cuda.is_available(

    def load_model(self, model_path):
        # state_dict = torch.load(model_path) if self.use_cuda else torch.load(model_path, map_location='cpu')
        state_dict = torch.load(model_path, map_location='cpu')
        self._sorel.load_state_dict(state_dict)
        # if self.use_cuda:
            # self._sorel.cuda()
        self._sorel.eval()
        self._classes = 3 + self._sorel.n_tags
        self._n_features = 2381
        return self
        
    def features_postproc_func(self, x):
        x1 = np.asarray(x[0], dtype=np.float32).copy()
        lz = x1 < 0
        gz = x1 > 0
        x1[lz] = - np.log(1 - x1[lz])
        x1[gz] = np.log(1 + x1[gz])
        return x1

    def preprocess(self, bytez):
        extractor = PEFeatureExtractor(2, print_feature_warning=False)
        features = np.array(extractor.feature_vector(bytez), dtype=np.float32).reshape(1, -1)
        features = self.features_postproc_func(features)

        return features

    def get_score(self,file_path):
        with open(file_path, 'rb') as fp:
            bytez = fp.read()
        
        features = torch.tensor(self.preprocess(bytez))
        # if self.use_cuda:
            # features.cuda()        
        
        rv = self._sorel.forward(features)
        score = rv['malware'].item() if 'malware' in rv else 0
        # count_score = rv['count'].item() if 'count' in rv else 0
        # tags_score = [r for r in rv['tags'].flatten().tolist()] if 'tags' in rv else [0] * self._sorel.n_tags

        return score
    
    def is_evasive(self, file_path):
        score = self.get_score(file_path)
        return score < self.thresh