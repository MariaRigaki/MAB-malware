import os
import sys
import numpy as np
import matplotlib.pyplot as plt
import matplotlib
import datetime
import configparser
import time
import logging

config = configparser.ConfigParser()
config.optionxform = str
config.read('conf/configure.ini')

#logging.basicConfig(
#    filename='log/all.log',
#    format='%(asctime)-15s [%(levelname)s] %(funcName)s: %(message)s',
#    level=logging.INFO)

#logging.getLogger().addHandler(logging.StreamHandler(sys.stdout))

#logger_rew = Utils.setup_logger('rewriter', 'log/rewriter.log')
#logger_min = Utils.setup_logger('minimizer', 'log/minimizer.log')

ACTION_MAP = {
    'OA': 'overlay_append',
    'SR': 'section_rename',
    'SA': 'section_add',
    'SP': 'section_append',
    'RC': 'remove_signature',
    'RD': 'remove_debug',
    'BC': 'break_optional_header_checksum',
}

ACTION_LIST = [
        'CR', # code_randomize
        'RS', #remove_signature
        'RD', #remove_debug
        'BC', #break_optional_header_checksum
        'OA', #overlay_append
        'SR', #section_rename
        'SA', #section_add
        'SP', #section_append
        'OA1', # overlay_append_one_byte
        'SA1', # section_add_one_byte
        'SP1', # section_append_one_byte
        'CP1', # code_section_append_one_byte
        'SR1', # section_rename_random
        ]

MICRO_ACTION_LIST = [
        'OA1', # overlay_append_one_byte
        'SA1', # section_add_one_byte
        'SP1', # section_append_one_byte
        'CP1', # code_section_append_one_byte
        'SR1', # section_rename_random
        ]

MACRO_ACTION_LIST = [
        'RS', #remove_signature
        'RD', #remove_debug
        'BC', #break_optional_header_checksum
        'OA', #overlay_append
        'SR', #section_rename
        'SA', #section_add
        'SP', #section_append
        ]

ACTION_LIST_ONCE = [
        'RS', #remove_signature
        'RD', #remove_debug
        'BC', #break_optional_header_checksum
        ]

ACTION_LIST_REPEAT = [
        'OA', #overlay_append
        'SR', #section_rename
        'SA', #section_add
        'SP', #section_append
        ]

ACTION_TO_MICROACTION = {
        'CR': ['', 'OA1', 'CP1'],
        'SA': ['', 'OA1', 'SA1', 'OA'],
        'SP': ['', 'OA1', 'SP1'],
        'SR': ['', 'OA1', 'SR1'],
        'RD': ['', 'OA1', 'CP1'],
        'RC': ['', 'OA1'],
        'RS': ['', 'OA1'],
        'BC': ['', 'OA1'],
        'OA': ['', 'OA1'],
        'CP1': ['', 'OA1'],
        'SA1': ['', 'OA1'],
        'SP1': ['', 'OA1'],
        'SR1': ['', 'OA1'],
        }

set_copied_md5 = set()

class Utils:
    def setup_logger(name, log_file, level=logging.INFO):
        """To setup as many loggers as you want"""
    
        handler = logging.FileHandler(log_file, mode='w')
        formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
        handler.setFormatter(formatter)
    
        logger = logging.getLogger(name)
        logger.setLevel(level)
        logger.propagate = False
        logger.addHandler(handler)
    
        return logger

    def copy_file(input_path, output_path):
        #tmp_path = 'output/copy_tmp/%s' %os.path.basename(input_path)
        tmp_dir = 'output/copy_tmp/'
        os.system('cp %s %s' %(input_path, tmp_dir))
        os.system('mv %s%s %s' %(tmp_dir, os.path.basename(input_path), output_path))

    def wait_on_stop_sign():
        while os.path.exists('stop.sign') == True:
            print('find stop.sign, wait 10 seconds')
            time.sleep(10)
    
    def short_name(sample_path):
        return os.path.basename(sample_path)[:8]
    
    # todo: may cause errors when ori_name contains '.', need fix
    def get_ori_name(sample_path):
        return os.path.basename(sample_path).split('.')[0].replace('__tmp__', '')
    
    def get_classifier_name():
        return config['CLASSIFIER']['name']
    
    def get_wait_time():
        return int(config['TIME']['wait_delete'])
    
    def get_max_working_sample_count():
        return int(config['REWRITER']['max_working_sample_count'])
    
    def get_average_pull():
        return int(config['REWRITER']['average_pull'])

    def get_thompson_sampling():
        if int(config['REWRITER']['thompson_sampling']) == 1:
            return True
        else:
            return False

    def get_update_parent():
        if int(config['REWRITER']['update_parent']) == 1:
            return True
        else:
            return False
    
    def get_max_length():
        return int(config['REWRITER']['max_length'])
    
    def get_smallest_section_size():
        return int(config['REWRITER']['smallest_section_size'])
    
    def get_largest_section_size():
        return int(config['REWRITER']['largest_section_size'])
    
    def get_malware_folder():
        return config['DATASET']['malware_folder']
    
    def get_benignware_folder():
        return str(config['DATASET']['benignware_folder'])
    
    def get_randomized_folder():
        return config['DATASET']['randomized_folder']
    
    def get_share_folder():
        return config['SHARE_FOLDER']['share_folder']

    def get_rewriter_scan_folder():
        return config['SHARE_FOLDER']['rewriter_scan_folder']

    def get_minimizer_scan_folder():
        return config['SHARE_FOLDER']['minimizer_scan_folder']
    
    def get_host_password():
        return config['SHARE_FOLDER']['host_password']
    
    def get_vm_password():
        return config['SHARE_FOLDER']['vm_password']
    
    def get_vm_username():
        return config['SHARE_FOLDER']['vm_username']
    
    def get_vm_ip():
        return config['SHARE_FOLDER']['vm_ip']
    
    #def get_vm_password():
    #    return config['SHARE_FOLDER']['vm_password']
    
    def get_cuckoo_token():
        return config['CUCKOO']['token']

    def get_ori_json_folder():
        return config['CUCKOO']['ori_json_folder']
    
    #def read_succ_action_count(av_name):
    #    update_sign_path = 'conf/succ_action_count_update.sign'
    #    while os.path.exists(update_sign_path):
    #        print('succ_action_count_update.sign exist')
    #        time.sleep(1)
    #    count_path = 'conf/succ_action_count_' + av_name + '.ini'
    #    count_config = configparser.ConfigParser()
    #    count_config.optionxform = str
    #    if os.path.exists(count_path) == False:
    #        count_config['SUCC_ACTION_COUNT'] = {}
    #        for action in ACTION_LIST_ONCE + ACTION_LIST_REPEAT:
    #            count_config['SUCC_ACTION_COUNT'][action] = '1.0'
    #        with open(count_path, 'w') as configfile:
    #            count_config.write(configfile)
    #    count_config.read(count_path)
    #    dict_succ_action_to_count = dict(count_config['SUCC_ACTION_COUNT'])
    #    for k, v in dict_succ_action_to_count.items():
    #        dict_succ_action_to_count[k] = float(v)
    #    #print(dict_succ_action_to_count)
    #    return dict_succ_action_to_count
    
    #def update_succ_action_count(av_name, dict_succ_action_to_count):
    #    count_path = 'conf/succ_action_count_' + av_name + '.ini'
    #    dict_succ_action_to_count_total = read_succ_action_count(av_name)
    #    for action, weight in dict_succ_action_to_count_total.items():
    #        if action in dict_succ_action_to_count:
    #            dict_succ_action_to_count_total[action] += dict_succ_action_to_count[action]
    #    update_sign_path = 'conf/succ_action_count_update.sign'
    #    os.system('touch %s' %update_sign_path)
    #    with open(count_path, 'w') as configfile:
    #        count_config = configparser.ConfigParser()
    #        count_config.optionxform = str
    #        count_config['SUCC_ACTION_COUNT'] = dict_succ_action_to_count_total
    #        count_config.write(configfile)
    #    os.system('rm %s' %update_sign_path)
    
    def heatmap(data, row_labels, col_labels, ax=None,
                cbar_kw={}, cbarlabel="", **kwargs):
        """
        Create a heatmap from a numpy array and two lists of labels.
    
        Parameters
        ----------
        data
            A 2D numpy array of shape (N, M).
        row_labels
            A list or array of length N with the labels for the rows.
        col_labels
            A list or array of length M with the labels for the columns.
        ax
            A `matplotlib.axes.Axes` instance to which the heatmap is plotted.  If
            not provided, use current axes or create a new one.  Optional.
        cbar_kw
            A dictionary with arguments to `matplotlib.Figure.colorbar`.  Optional.
        cbarlabel
            The label for the colorbar.  Optional.
        **kwargs
            All other arguments are forwarded to `imshow`.
        """
    
        if not ax:
            ax = plt.gca()
    
        # Plot the heatmap
        im = ax.imshow(data, **kwargs)
    
        # Create colorbar
        cbar = ax.figure.colorbar(im, ax=ax, **cbar_kw)
        cbar.ax.set_ylabel(cbarlabel, rotation=-90, va="bottom")
    
        # We want to show all ticks...
        ax.set_xticks(np.arange(data.shape[1]))
        ax.set_yticks(np.arange(data.shape[0]))
        # ... and label them with the respective list entries.
        ax.set_xticklabels(col_labels)
        ax.set_yticklabels(row_labels)
    
        # Let the horizontal axes labeling appear on top.
        ax.tick_params(top=True, bottom=False,
                       labeltop=True, labelbottom=False)
    
        # Rotate the tick labels and set their alignment.
        plt.setp(ax.get_xticklabels(), rotation=-30, ha="right",
                 rotation_mode="anchor")
    
        # Turn spines off and create white grid.
        for edge, spine in ax.spines.items():
            spine.set_visible(False)
    
        ax.set_xticks(np.arange(data.shape[1]+1)-.5, minor=True)
        ax.set_yticks(np.arange(data.shape[0]+1)-.5, minor=True)
        ax.grid(which="minor", color="w", linestyle='-', linewidth=0)
        ax.tick_params(which="minor", bottom=False, left=False)
    
        return im
    
    def annotate_heatmap(im, data=None, valfmt="{x:.2f}",
                         textcolors=["black", "white"],
                         threshold=None, diagonal=True, **textkw):
        """
        A function to annotate a heatmap.
    
        Parameters
        ----------
        im
            The AxesImage to be labeled.
        data
            Data used to annotate.  If None, the image's data is used.  Optional.
        valfmt
            The format of the annotations inside the heatmap.  This should either
            use the string format method, e.g. "$ {x:.2f}", or be a
            `matplotlib.ticker.Formatter`.  Optional.
        textcolors
            A list or array of two color specifications.  The first is used for
            values below a threshold, the second for those above.  Optional.
        threshold
            Value in data units according to which the colors from textcolors are
            applied.  If None (the default) uses the middle of the colormap as
            separation.  Optional.
        **kwargs
            All other arguments are forwarded to each call to `text` used to create
            the text labels.
        """
    
        if not isinstance(data, (list, np.ndarray)):
            data = im.get_array()
    
        # Normalize the threshold to the images color range.
        if threshold is not None:
            threshold = im.norm(threshold)
        else:
            threshold = im.norm(data.max())/2.
    
        # Set default alignment to center, but allow it to be
        # overwritten by textkw.
        kw = dict(horizontalalignment="center",
                  verticalalignment="center")
        kw.update(textkw)
    
        # Get the formatter in case a string is supplied
        if isinstance(valfmt, str):
            valfmt = matplotlib.ticker.StrMethodFormatter(valfmt)
    
        # Loop over the data and create a `Text` for each "pixel".
        # Change the text's color depending on the data.
        texts = []
        for i in range(data.shape[0]):
            for j in range(data.shape[1]):
                if i != j or diagonal == True: 
                    kw.update(color=textcolors[int(im.norm(data[i, j]) > threshold)])
                    text = im.axes.text(j, i, valfmt(data[i, j], None), **kw)
                    texts.append(text)
                else:
                    kw.update(color=textcolors[int(im.norm(data[i, j]) > threshold)])
                    text = im.axes.text(j, i, "-", **kw)
                    texts.append(text)
    
        return texts
