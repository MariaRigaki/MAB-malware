import os
import sys
import hashlib
import time
import datetime
from utils import *
from models import *

from MalConv import MalConv
from ember import predict_sample
import lightgbm as lgb
import numpy as np
import clamd
#import pyclamd
import glob

MALCONV_MODEL_PATH = 'models/malconv/malconv.checkpoint'
NONNEG_MODEL_PATH = 'models/nonneg/nonneg.checkpoint'
EMBER_2019_MODEL_PATH = 'models/ember_2019/ember_model.txt'
EMBER_MODEL_gym_PATH = 'models/ember_gym/gradient_boosting.pkl'

rewriter_vm_folder = os.getcwd() + '/' + Utils.get_share_folder() + 'rewriter/'
seq_minimizer_vm_folder = os.getcwd() + '/' + Utils.get_share_folder() + 'seq_minimizer/'
mic_minimizer_vm_folder = os.getcwd() + '/' + Utils.get_share_folder() + 'mic_minimizer/'

LOG_PATH = ''

def log(content):
    time_string = datetime.datetime.now().strftime('%Y/%m/%d_%H:%M:%S')
    print('[' + time_string + ']', content)
    with open(LOG_PATH, 'a') as fp:
        fp.write('[%s] %s\n' %(time_string, content))
    sys.stdout.flush()

def main():
    classifier_name = sys.argv[1]
    global LOG_PATH
    LOG_PATH = 'log/%s.%s.log' %(classifier_name, datetime.datetime.now().strftime('%Y%m%d_%H%M%S'))

    log('Model %s loading...' %classifier_name)
    if classifier_name == 'malconv':
        model = MalConvModel( MALCONV_MODEL_PATH, thresh=0.5 )
    elif classifier_name == 'nonneg_malconv':
        model = MalConvModel( NONNEG_MODEL_PATH, thresh=0.35, name='nonneg_malconv' )
    elif classifier_name == 'ember_gym':
        model = EmberModel_gym( EMBER_MODEL_gym_PATH, thresh=0.90 )
    elif classifier_name == 'ember_2019':
        model = EmberModel_2019( EMBER_2019_MODEL_PATH, thresh=0.8336 )
    elif classifier_name == 'ember_2020':
        model = EmberModel_2020()
    elif classifier_name == 'clamav':
        model = ClamAV()

    # todo: for gym only
    print('for gym only!!!!')
    while True:
        #log('evaluate Rewriter')
        #evaluate(model, rewriter_vm_folder)
        #log('evaluate Seq Minimizer')
        #evaluate(model, seq_minimizer_vm_folder)
        #log('evaluate Mic Minimizer')
        #evaluate(model, mic_minimizer_vm_folder)
        
        get_score(model, rewriter_vm_folder)

def evaluate(model, classifier_input):
    log('evaluate %s' %(classifier_input))
    list_file = glob.glob(classifier_input + '*.exe')

    file_amount = len(list_file)
    log('================= %d ===================' %file_amount)
    #if file_amount == 0:
    #    time.sleep(1)
    if file_amount > 0:
        list_file.sort(key=os.path.getmtime)
        file_path = list_file[0]
        log('processing %s' %(file_path))
        if os.path.exists(file_path) == False:
            log('file does not exist')
            return
        result = model.predict(file_path)
        if result == True:
            log('Malicious! delete!')
            os.system('rm %s' %(file_path))
        else:
            log('Benign')
            os.system('mv %s %s.benign' %(file_path, file_path))

def get_score(model, classifier_input):
    log('score %s' %(classifier_input))
    list_file = glob.glob(classifier_input + '*.exe')

    file_amount = len(list_file)
    log('================= %d ===================' %file_amount)
    #if file_amount == 0:
    #    time.sleep(1)
    if file_amount > 0:
        list_file.sort(key=os.path.getmtime)
        file_path = list_file[0]
        log('processing %s' %(file_path))
        if os.path.exists(file_path) == False:
            log('file does not exist')
            return
        score = model.get_score(file_path)
        print('mv %s %s_%f' %(file_path, file_path, score))
        os.system('mv %s %s_%f' %(file_path, file_path, score))

if __name__ == '__main__':
    main()
