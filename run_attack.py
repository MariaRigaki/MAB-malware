from bandit import Bandit
from minimizer import Minimizer
from rewriter_MAB import MABRewriter
from rewriter_GP import GPRewriter
from rewriter_MCTS import MCTSRewriter
from samples_manager import SamplesManager
from utils import *
import random
import threading
from classifier import Classifier
import argparse



if __name__ == '__main__':
    prog = "MAB adversarial malware generation"
    parser = argparse.ArgumentParser(prog=prog)
    # parser.add_argument("-d", "--data_dir", type=str, default=".", required=True, help="Directory that holds the malware data")
    parser.add_argument("-s", "--seed", type=int, default="42", required=False, help="Seed for random states")
    parser.add_argument("-m", "--model", type=str, default="LGB", required=True,
        choices=["ember", "sorelFCNN", "sorelLGB", "FCNN", "dualFCNN", "LGB"], help="Model name")
    # parser.add_argument("-l", "--log_dir", type=str, default="./logs", required=False, help="Where to store the log files with the results")
    parser.add_argument("-t", "--threshold", type=np.float32, default=0.50, required=True, help="Model threshold")
    parser.add_argument("--scaler", type=str, required=False, default=None, help="The path of the robust scaler object")
    parser.add_argument("-p", "--path", type=str, required=True, help="Path to model file")

    args = parser.parse_args()
    model_name = args.model 
    model_path = args.path
    scaler_path = args.scaler
    threshold = args.threshold

    if model_name == 'dualFCNN':
        dual_input = True
    else:
        dual_input = False

    random.seed(args.seed)

    logger_rew.info('============= Start ============')
    logger_min.info('============= Start ============')
    Utils.print_configure()
    Utils.create_folders()

    bandit = Bandit()
    samples_manager = SamplesManager(Utils.get_malware_folder(), bandit)

    print('\n### Log can be found in the log/ folder ###\n')
    if Utils.get_classifier_scan_type() == SCAN_TYPE_MODEL:
        # classifier = Classifier(Utils.get_classifier_name())
        classifier = Classifier(model_name, model_path, scaler_path=scaler_path, thresh=threshold, dual=dual_input)
        classifier_thread = threading.Thread(target=classifier.run)
        print('start classifier...')
        classifier_thread.start()

    rewriter_type = Utils.get_rewriter_type()
    if rewriter_type == 'MAB':
        rewriter = MABRewriter(bandit, samples_manager)
        minimizer = Minimizer(samples_manager)

        rewriter_thread = threading.Thread(target=rewriter.run)
        minimizer_thread = threading.Thread(target=minimizer.run)

        print('start rewriter...')
        rewriter_thread.start()
        print('start minimizer...')
        minimizer_thread.start()

        rewriter_thread.join()
        minimizer_thread.join()
    elif rewriter_type == 'GP':
        rewriter = GPRewriter(bandit, samples_manager)
        rewriter.run()
    elif rewriter_type == 'MCTS':
        rewriter = MCTSRewriter(bandit, samples_manager)
        rewriter.run()
    elif rewriter_type == 'RAND':
        rewriter = MABRewriter(bandit, samples_manager, rand=True)
        rewriter.run()

    if Utils.get_classifier_scan_type() == SCAN_TYPE_MODEL:
        classifier_thread.join()

    # Copy all the failed malware to non_evasive folder
    print("Copy failed malware to non_evasive folder")
    Utils.copy_to_non_evasive_folder()
    print("Done!")

    
